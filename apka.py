import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QTextEdit, QPushButton, QVBoxLayout, QWidget
from PyQt5.QtCore import QThread, pyqtSignal
import logging
from logging.handlers import QueueHandler
import queue
import threading
import time
import random
import speech_recognition as sr
from gtts import gTTS
from playsound import playsound
import os
import tempfile
import sounddevice as sd
import numpy as np
import ggwave
from queue import Queue
from openai import OpenAI
from dotenv import load_dotenv

# Konfiguracja logowania
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")

# Inicjalizacja OpenAI
load_dotenv("klucz.env")
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Inicjalizacja GGWave
try:
    ggwave_instance = ggwave.init()
    logging.info("‚úÖ GGWave zainicjalizowany poprawnie.")
except Exception as e:
    logging.error(f"‚ùå B≈ÇƒÖd inicjalizacji GGWave: {e}")
    ggwave_instance = None

# Funkcja OpenAI
def get_response(user_input, system_prompt):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_input}
            ],
            max_tokens=30,
            temperature=0.8,
            top_p=0.95
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"B≈ÇƒÖd API Open AI: {str(e)}")
        return f"B≈ÇƒÖd API Open AI: {str(e)}"

# Funkcje GGWave
def send_via_ggwave(message: str, protocolId: int = 1, volume: int = 60):
    try:
        if not message:
            logging.warning("Pusta wiadomo≈õƒá, pomijam wysy≈Çanie.")
            return None

        if len(message.encode('utf-8')) > 100:
            logging.warning(f"Wiadomo≈õƒá zbyt d≈Çuga ({len(message.encode('utf-8'))} bajt√≥w), obcinam do 100 znak√≥w.")
            message = message[:100]

        waveform = ggwave.encode(message, protocolId=protocolId, volume=volume)
        audio = np.frombuffer(waveform, dtype=np.float32)
        logging.debug(f"Rozmiar waveform: {len(waveform)} bajt√≥w")
        sd.play(audio, samplerate=48000)
        sd.wait()
        logging.info(f"üì° [GGWave] Wys≈Çano: {message}")
        time.sleep(0.3)
        return waveform
    except Exception as e:
        logging.error(f"B≈ÇƒÖd przy wysy≈Çaniu GGWave: {e}")
        return None

def receive_via_ggwave(queue: Queue, stop_event: threading.Event, bot_name: str, silence_timeout: float = 15.0):
    if ggwave_instance is None:
        logging.error("‚ùå Brak instancji GGWave ‚Äî nie mo≈ºna odbieraƒá.")
        queue.put((bot_name, None))
        return

    decoded = None
    last_data_time = time.time()
    start_time = time.time()

    def callback(indata, frames, time_info, status):
        nonlocal decoded, last_data_time
        if status:
            logging.debug(f"[{bot_name}] Status: {status}")
        if stop_event.is_set():
            return
            
        try:
            audio_level = np.max(np.abs(indata))
            if audio_level > 0.001:
                last_data_time = time.time()
                logging.debug(f"[{bot_name}] Poziom audio: {audio_level:.6f}")

            data_bytes = indata.tobytes()
            res = ggwave.decode(ggwave_instance, data_bytes)
            
            if res:
                try:
                    decoded_text = res.decode("utf-8")
                    logging.info(f"üéØ [{bot_name}] ZDEKODOWANO: '{decoded_text}'")
                    decoded = decoded_text
                    queue.put((bot_name, decoded))
                    return
                except Exception as e:
                    logging.debug(f"[{bot_name}] B≈ÇƒÖd dekodowania UTF-8: {e}")
                    decoded = str(res)
                    queue.put((bot_name, decoded))
                    return
                    
        except Exception as e:
            logging.debug(f"[{bot_name}] B≈ÇƒÖd w callback: {e}")

    try:
        logging.info(f"üéß {bot_name} nas≈Çuchuje GGWave (timeout: {silence_timeout}s)...")
        
        with sd.InputStream(
            callback=callback,
            channels=1,
            samplerate=48000,
            dtype='float32',
            blocksize=1024,
            latency='low',
            device=sd.default.device[0]
        ) as stream:
            while not stop_event.is_set():
                if time.time() - last_data_time > silence_timeout:
                    logging.info(f"‚è∞ [{bot_name}] Timeout ciszy ({silence_timeout}s)")
                    break
                if time.time() - start_time > 30:
                    logging.info(f"‚è∞ [{bot_name}] Maksymalny czas nas≈Çuchiwania")
                    break
                time.sleep(0.1)
                
    except Exception as e:
        logging.error(f"‚ùå B≈ÇƒÖd InputStream dla {bot_name}: {e}")
        queue.put((bot_name, None))
        return

    if decoded:
        logging.info(f"‚úÖ {bot_name} ODEBRA≈Å: '{decoded}'")
        queue.put((bot_name, decoded))
    else:
        logging.info(f"‚ùå {bot_name} nic nie odebra≈Ç")
        queue.put((bot_name, None))

# Funkcja STT
def listen():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        logging.info("üé§ M√≥w teraz... (5 sekund na rozpoczƒôcie)")
        try:
            audio = r.listen(source, timeout=5)
            text = r.recognize_google(audio, language="pl-PL")
            return text
        except sr.WaitTimeoutError:
            return ""
        except sr.UnknownValueError:
            return ""
        except sr.RequestError as e:
            logging.error(f"B≈ÇƒÖd po≈ÇƒÖczenia ze STT: {str(e)}")
            return ""

# Funkcja TTS
def speak(text):
    if not text or not text.strip():
        return
    try:
        logging.info(f"M√≥wiƒô: {text}")
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
            tts = gTTS(text=text, lang="pl")
            tts.save(fp.name)
            temp_path = fp.name
        playsound(temp_path)
        os.remove(temp_path)
    except Exception as e:
        logging.error(f"B≈ÇƒÖd w TTS: {e}")

# Klasa Bot
class Bot:
    def __init__(self, name, system_prompt):
        self.name = name
        self.system_prompt = system_prompt

# WƒÖtek g≈Ç√≥wny aplikacji
class MainThread(QThread):
    log_signal = pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self.running = False
        self.bots = []
        self.last_input = None
        self.last_speaker = None
        self.silence_counter = 0

    def run(self):
        self.running = True
        self.log_signal.emit("ü§ñ Witaj! Rozpoczynamy rozmowƒô. Powiedz 'do widzenia', aby zako≈Ñczyƒá.")
        self.log_signal.emit("Komendy: 'Dodaj bota <nazwa> jako <charakter>', 'Id≈∫ bot <nazwa>'")

        while self.running:
            try:
                user_input = listen()

                if user_input:
                    self.silence_counter = 0
                    self.log_signal.emit(f"üßç Ty: {user_input}")
                    self.last_input = user_input
                    self.last_speaker = None

                    # Obs≈Çuga polece≈Ñ
                    if user_input.lower().startswith("dodaj bota"):
                        try:
                            parts = user_input.lower().split(" jako ")
                            bot_name = parts[0].replace("dodaj bota ", "").strip()
                            bot_character = parts[1].strip()
                            self.bots.append(Bot(bot_name, f"Jeste≈õ {bot_character}, kt√≥ry odpowiada w jƒôzyku polskim."))
                            response = f"Dodano bota {bot_name} jako {bot_character}."
                            self.log_signal.emit(f"ü§ñ System: {response}")
                            speak(response)
                        except IndexError:
                            response = "B≈ÇƒÖd: Podaj nazwƒô bota i charakter, np. 'Dodaj bota Rafa≈Ç jako pisarz'."
                            self.log_signal.emit(f"ü§ñ System: {response}")
                            speak(response)
                        continue

                    if user_input.lower().startswith("id≈∫ bot"):
                        try:
                            bot_name = user_input.lower().replace("id≈∫ bot ", "").strip()
                            bots_before = len(self.bots)
                            self.bots = [bot for bot in self.bots if bot.name.lower() != bot_name.lower()]
                            if len(self.bots) < bots_before:
                                response = f"Usuniƒôto bota {bot_name}."
                                if self.last_speaker and self.last_speaker.lower() == bot_name.lower():
                                    self.last_speaker = None
                            else:
                                response = f"Nie znaleziono bota {bot_name}."
                            self.log_signal.emit(f"ü§ñ System: {response}")
                            speak(response)
                        except Exception:
                            response = "B≈ÇƒÖd: Podaj poprawnƒÖ nazwƒô bota, np. 'Id≈∫ bot Rafa≈Ç'."
                            self.log_signal.emit(f"ü§ñ System: {response}")
                            speak(response)
                        continue

                    if "do widzenia" in user_input.lower():
                        response = "Do widzenia! Ko≈Ñczƒô rozmowƒô."
                        self.log_signal.emit(f"ü§ñ System: {response}")
                        speak(response)
                        self.running = False
                        break

                else:
                    self.silence_counter += 1

                if self.bots:
                    if user_input:
                        for bot in self.bots:
                            response = get_response(user_input, bot.system_prompt)
                            self.log_signal.emit(f"ü§ñ {bot.name}: {response}")
                            try:
                                speak(f"{bot.name} m√≥wi: {response}")
                                self.last_input = response
                                self.last_speaker = bot.name
                                time.sleep(0.5)
                            except Exception as e:
                                self.log_signal.emit(f"B≈ÇƒÖd TTS dla {bot.name}: {str(e)}")

                    # Komunikacja GGWave miƒôdzy botami
                    if self.silence_counter >= 2 and len(self.bots) > 1:
                        current_bot = random.choice([b for b in self.bots if b.name != self.last_speaker])
                        context = self.last_input if self.last_input else "Cze≈õƒá, co s≈Çychaƒá?"
                        response = get_response(context, current_bot.system_prompt)
                        self.log_signal.emit(f"ü§ñ {current_bot.name}: {response}")

                        result_queue = Queue()
                        stop_event = threading.Event()
                        threads = []

                        for bot in [b for b in self.bots if b.name != current_bot.name]:
                            thread = threading.Thread(
                                target=receive_via_ggwave,
                                args=(result_queue, stop_event, bot.name, 12.0)
                            )
                            threads.append(thread)
                            thread.start()

                        time.sleep(1.0)
                        send_thread = threading.Thread(target=send_via_ggwave, args=(response,))
                        send_thread.start()

                        send_thread.join()
                        time.sleep(2.0)

                        stop_event.set()

                        for thread in threads:
                            thread.join()

                        received_messages = []
                        while not result_queue.empty():
                            bot_name, decoded = result_queue.get()
                            if decoded:
                                received_messages.append((bot_name, decoded))

                        if received_messages:
                            bot_name, decoded = random.choice(received_messages)
                            self.log_signal.emit(f"üì° {bot_name} (GGWave odebrane): {decoded}")
                            self.last_input = decoded
                            self.last_speaker = current_bot.name
                        else:
                            self.log_signal.emit("‚ö†Ô∏è ≈ªaden bot nie odebra≈Ç wiadomo≈õci przez GGWave, u≈ºywam TTS")
                            speak(f"{current_bot.name} m√≥wi: {response}")
                            self.last_input = response
                            self.last_speaker = current_bot.name

                    elif len(self.bots) >= 1:
                        available_bots = [bot for bot in self.bots if bot.name != self.last_speaker]
                        if available_bots:
                            self.log_signal.emit("ü§ñ Boty rozmawiajƒÖ miƒôdzy sobƒÖ (tryb normalny)...")
                            current_bot = random.choice(available_bots)
                            context = self.last_input if self.last_input else "Cze≈õƒá, co s≈Çychaƒá?"
                            response = get_response(context, current_bot.system_prompt)
                            self.log_signal.emit(f"ü§ñ {current_bot.name}: {response}")
                            try:
                                speak(f"{current_bot.name} m√≥wi: {response}")
                                self.last_input = response
                                self.last_speaker = current_bot.name
                                time.sleep(0.5)
                            except Exception as e:
                                self.log_signal.emit(f"B≈ÇƒÖd TTS dla {current_bot.name}: {str(e)}")

                if not self.bots and user_input and not user_input.lower().startswith(("dodaj bota", "do widzenia")):
                    response = "Nie ma ≈ºadnych bot√≥w. Dodaj bota komendƒÖ 'Dodaj bota <nazwa> jako <charakter>'."
                    self.log_signal.emit(f"ü§ñ System: {response}")
                    speak(response)

            except Exception as e:
                self.log_signal.emit(f"B≈ÇƒÖd w g≈Ç√≥wnej pƒôtli: {str(e)}")
                continue

# Interfejs graficzny
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Bot Conversation App")
        self.setGeometry(100, 100, 800, 600)

        # Utworzenie g≈Ç√≥wnego wid≈ºetu i uk≈Çadu
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout(self.central_widget)

        # Pole tekstowe na logi
        self.log_display = QTextEdit()
        self.log_display.setReadOnly(True)
        self.layout.addWidget(self.log_display)

        # Przyciski
        self.start_button = QPushButton("Uruchom")
        self.stop_button = QPushButton("Zatrzymaj")
        self.layout.addWidget(self.start_button)
        self.layout.addWidget(self.stop_button)

        # WƒÖtek g≈Ç√≥wny
        self.main_thread = MainThread()
        self.main_thread.log_signal.connect(self.append_log)

        # Konfiguracja logowania do GUI
        self.log_queue = queue.Queue()
        self.log_handler = QueueHandler(self.log_queue)
        logging.getLogger().addHandler(self.log_handler)

        # Po≈ÇƒÖczenie przycisk√≥w
        self.start_button.clicked.connect(self.start_main_thread)
        self.stop_button.clicked.connect(self.stop_main_thread)

        # WƒÖtek do obs≈Çugi log√≥w
        self.log_thread = threading.Thread(target=self.process_log_queue)
        self.log_thread.daemon = True
        self.log_thread.start()

    def append_log(self, message):
        self.log_display.append(message)

    def process_log_queue(self):
        while True:
            try:
                record = self.log_queue.get(timeout=1)
                if record and record.levelno >= logging.INFO:  # Tylko INFO i wy≈ºsze do GUI
                    self.main_thread.log_signal.emit(record.getMessage())
            except queue.Empty:
                continue

    def start_main_thread(self):
        if not self.main_thread.isRunning():
            self.main_thread.start()
            self.start_button.setEnabled(False)
            self.stop_button.setEnabled(True)

    def stop_main_thread(self):
        self.main_thread.running = False
        self.main_thread.wait()
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)

    def closeEvent(self, event):
        self.main_thread.running = False
        self.main_thread.wait()
        event.accept()

if __name__ == "__main__":
    sd.default.device = (13, 3)  # (input_id, output_id)
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())