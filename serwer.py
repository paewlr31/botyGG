from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request
from fastapi.responses import HTMLResponse
from pyngrok import ngrok
import uvicorn
from typing import Dict, List, Optional
from openai import OpenAI
from dotenv import load_dotenv
import os
import uuid
import logging
import asyncio

# Konfiguracja logowania
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")

app = FastAPI()

# Logowanie niepoprawnych ≈ºƒÖda≈Ñ HTTP
@app.middleware("http")
async def log_invalid_requests(request: Request, call_next):
    try:
        response = await call_next(request)
        return response
    except Exception as e:
        logging.error(f"Niepoprawne ≈ºƒÖdanie HTTP: {request.url}, b≈ÇƒÖd: {str(e)}")
        raise

# Inicjalizacja OpenAI
load_dotenv("klucz.env")
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    logging.error("Brak klucza OPENAI_API_KEY w pliku klucz.env")
    raise ValueError("Brak klucza OpenAI API")
client = OpenAI(api_key=api_key)

# HTML dla frontendu
html = """
<!DOCTYPE html>
<html>
<head>
    <title>Grupowy czat</title>
    <style>
        body { font-family: Arial; background-color: #fafafa; padding: 20px; }
        #messages { height: 400px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; }
        #userList { border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; }
        #inputArea { display: flex; flex-direction: column; gap: 10px; }
        input, button { padding: 8px; font-size: 16px; }
        button { cursor: pointer; }
        button:disabled { cursor: not-allowed; opacity: 0.5; }
        #userName, #botName, #botCharacter, #removeBotName { width: 200px; }
        .timeout-info { color: blue; font-style: italic; }
        .turn-info { color: green; font-weight: bold; }
    </style>
</head>
<body>
    <h2>Pok√≥j czatu</h2>
    <div>
        Twoja nazwa: <span id="currentUserName">U≈ºytkownik</span>
        <input id="userName" placeholder="Nowa nazwa" />
        <button onclick="setUserName()">Ustaw nazwƒô</button>
    </div>
    <div>Lista u≈ºytkownik√≥w i bot√≥w:</div>
    <div id="userList"></div>
    <div id="messages"></div>
    <div id="inputArea">
        <input id="messageText" placeholder="Napisz lub powiedz wiadomo≈õƒá..." onkeypress="if(event.key === 'Enter') sendMessage()" />
        <div>
            <button onclick="sendMessage()">Wy≈õlij</button>
            <button onclick="startSpeechRecognition()">üé§ M√≥w</button>
        </div>
        <div>
            <h4>Dodaj bota</h4>
            <input id="botName" placeholder="Nazwa bota" />
            <input id="botCharacter" placeholder="Charakter bota (np. pisarz)" />
            <button id="addBotButton" onclick="addBot()">+ Bot</button>
        </div>
        <div>
            <h4>Usu≈Ñ bota</h4>
            <input id="removeBotName" placeholder="Nazwa bota do usuniƒôcia" />
            <button id="removeBotButton" onclick="removeBot()">Usu≈Ñ bota</button>
        </div>
    </div>

    <script>
        let ws;
        let userId = localStorage.getItem("userId") || `U≈ºytkownik_${Math.random().toString(36).substr(2, 5)}`;
        localStorage.setItem("userId", userId);
        let userName = "U≈ºytkownik";
        let userBots = [];

        function connectWebSocket() {
            console.log("≈ÅƒÖczenie WebSocket dla userId:", userId);
            ws = new WebSocket(`wss://${location.host}/ws/${userId}`);
            ws.onopen = () => {
                console.log("WebSocket po≈ÇƒÖczony");
                let msgBox = document.getElementById("messages");
                msgBox.innerHTML += `<div>‚úÖ Po≈ÇƒÖczono z serwerem</div>`;
                ws.send(JSON.stringify({ type: "get_status" }));
            };
            ws.onmessage = (event) => {
                console.log("Otrzymano wiadomo≈õƒá:", event.data);
                try {
                    let data = JSON.parse(event.data);
                    let msgBox = document.getElementById("messages");
                    if (data.type === "message") {
                        msgBox.innerHTML += `<div>${data.content}</div>`;
                        msgBox.scrollTop = msgBox.scrollHeight;
                        try {
                            let utterance = new SpeechSynthesisUtterance(data.content);
                            utterance.lang = "pl-PL";
                            window.speechSynthesis.speak(utterance);
                        } catch (e) {
                            console.error("B≈ÇƒÖd TTS:", e);
                            msgBox.innerHTML += `<div style="color: red;">‚ö†Ô∏è TTS nieobs≈Çugiwane w tej przeglƒÖdarce</div>`;
                        }
                    } else if (data.type === "user_list") {
                        let userList = document.getElementById("userList");
                        let usersHtml = "<strong>U≈ºytkownicy:</strong> " + (data.users.length ? data.users.join(", ") : "Brak");
                        let botsHtml = "<strong>Boty:</strong> " + (data.bots.length ? data.bots.map(b => `${b.name} (w≈Ça≈õciciel: ${b.owner})`).join(", ") : "Brak");
                        userList.innerHTML = usersHtml + "<br>" + botsHtml;
                        userBots = data.bots.filter(b => b.owner_id === userId).map(b => b.name);
                        updateButtons();
                    } else if (data.type === "timeout_info") {
                        console.log("Otrzymano timeout_info:", data.content);
                        msgBox.innerHTML += `<div class="timeout-info">${data.content}</div>`;
                        msgBox.scrollTop = msgBox.scrollHeight;
                    } else if (data.type === "turn_info") {
                        console.log("Otrzymano turn_info:", data.content);
                        msgBox.innerHTML += `<div class="turn-info">${data.content}</div>`;
                        msgBox.scrollTop = msgBox.scrollHeight;
                    }
                } catch (e) {
                    console.error("B≈ÇƒÖd parsowania wiadomo≈õci:", e);
                }
            };
            ws.onclose = () => {
                console.log("WebSocket zamkniƒôty, ponowne ≈ÇƒÖczenie...");
                let msgBox = document.getElementById("messages");
                msgBox.innerHTML += `<div style="color: red;">‚ùå Po≈ÇƒÖczenie zamkniƒôte. Pr√≥bujƒô ponownie...</div>`;
                setTimeout(connectWebSocket, 2000);
            };
            ws.onerror = (error) => {
                console.error("B≈ÇƒÖd WebSocket:", error);
                let msgBox = document.getElementById("messages");
                msgBox.innerHTML += `<div style="color: red;">‚ö†Ô∏è B≈ÇƒÖd WebSocket: ${error}</div>`;
            };
        }
        connectWebSocket();

        function updateButtons() {
            let addBotButton = document.getElementById("addBotButton");
            let removeBotButton = document.getElementById("removeBotButton");
            removeBotButton.disabled = userBots.length === 0;
            console.log("Aktualizacja przycisk√≥w: addBot=aktywny, removeBot=", userBots.length > 0);
        }

        function sendMessage() {
            let input = document.getElementById("messageText");
            if (input.value.trim()) {
                let message = { type: "message", content: input.value, user: userName };
                console.log("Wysy≈Çanie wiadomo≈õci:", message);
                if (ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify(message));
                    input.value = "";
                } else {
                    console.log("WebSocket nie jest otwarty");
                    alert("Po≈ÇƒÖczenie z serwerem nieaktywne. Spr√≥buj ponownie.");
                }
            }
        }

        function startSpeechRecognition() {
            try {
                let recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
                recognition.lang = "pl-PL";
                recognition.onresult = (event) => {
                    let transcript = event.results[0][0].transcript;
                    console.log("Rozpoznano mowƒô:", transcript);
                    document.getElementById("messageText").value = transcript;
                    sendMessage();
                };
                recognition.onerror = (event) => {
                    console.error("B≈ÇƒÖd STT:", event.error);
                    let msgBox = document.getElementById("messages");
                    msgBox.innerHTML += `<div style="color: red;">‚ö†Ô∏è B≈ÇƒÖd rozpoznawania mowy: ${event.error}</div>`;
                };
                recognition.start();
            } catch (e) {
                console.error("B≈ÇƒÖd STT:", e);
                let msgBox = document.getElementById("messages");
                msgBox.innerHTML += `<div style="color: red;">‚ö†Ô∏è Rozpoznawanie mowy nieobs≈Çugiwane w tej przeglƒÖdarce</div>`;
            }
        }

        function setUserName() {
            let newName = document.getElementById("userName").value.trim();
            if (newName) {
                userName = newName;
                document.getElementById("currentUserName").innerHTML = userName;
                document.getElementById("userName").value = "";
                let message = { type: "set_user_name", content: userName };
                console.log("Wysy≈Çanie set_user_name:", message);
                if (ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify(message));
                } else {
                    console.log("WebSocket nie jest otwarty");
                    alert("Po≈ÇƒÖczenie z serwerem nieaktywne. Spr√≥buj ponownie.");
                }
            } else {
                console.log("Brak nowej nazwy u≈ºytkownika");
                alert("Podaj nowƒÖ nazwƒô u≈ºytkownika!");
            }
        }

        function addBot() {
            let botName = document.getElementById("botName").value.trim();
            let botCharacter = document.getElementById("botCharacter").value.trim();
            if (botName && botCharacter) {
                let message = { type: "add_bot", name: botName, character: botCharacter };
                console.log("Wysy≈Çanie add_bot:", message);
                if (ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify(message));
                    document.getElementById("botName").value = "";
                    document.getElementById("botCharacter").value = "";
                } else {
                    console.log("WebSocket nie jest otwarty");
                    alert("Po≈ÇƒÖczenie z serwerem nieaktywne. Spr√≥buj ponownie.");
                }
            } else {
                console.log("Brak nazwy lub charakteru bota");
                alert("Podaj nazwƒô i charakter bota!");
            }
        }

        function removeBot() {
            let botName = document.getElementById("removeBotName").value.trim();
            if (botName) {
                let message = { type: "remove_bot", name: botName };
                console.log("Wysy≈Çanie remove_bot:", message);
                if (ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify(message));
                    document.getElementById("removeBotName").value = "";
                } else {
                    console.log("WebSocket nie jest otwarty");
                    alert("Po≈ÇƒÖczenie z serwerem nieaktywne. Spr√≥buj ponownie.");
                }
            } else {
                console.log("Brak nazwy bota do usuniƒôcia");
                alert("Podaj nazwƒô bota do usuniƒôcia!");
            }
        }
    </script>
</body>
</html>
"""

@app.get("/")
async def get():
    return HTMLResponse(html)

class Bot:
    def __init__(self, id: str, name: str, character: str, owner_id: str):
        self.id = id
        self.name = name
        self.system_prompt = f"Jeste≈õ {character}, kt√≥ry odpowiada zwiƒô≈∫le po polsku."
        self.owner_id = owner_id

    async def respond(self, message: str) -> str:
        logging.debug(f"Bot {self.name} pr√≥buje odpowiedzieƒá na: {message}")
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": message}
                ],
                max_tokens=30
            )
            answer = response.choices[0].message.content.strip()
            logging.info(f"Bot {self.name} odpowiada: {answer}")
            return answer
        except Exception as e:
            logging.error(f"B≈ÇƒÖd odpowiedzi bota {self.name}: {str(e)}")
            return f"{self.name}: Cze≈õƒá, co s≈Çychaƒá?"

class ConnectionManager:
    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}
        self.users: Dict[str, str] = {}
        self.bots: List[Bot] = []
        self.last_message: Optional[str] = None
        self.last_speaker: Optional[str] = None
        self.user_timeout_seconds: int = 5
        self.bot_pause_seconds: int = 2
        self.user_silence_count: int = 0
        self.conversation_active: bool = False

    async def connect(self, websocket: WebSocket, user_id: str):
        await websocket.accept()
        user_name = self.users.get(user_id, f"U≈ºytkownik_{user_id[:5]}")
        self.active_connections[user_id] = websocket
        self.users[user_id] = user_name
        logging.info(f"U≈ºytkownik {user_name} do≈ÇƒÖczy≈Ç")
        await self.broadcast({"type": "message", "content": f"üëã {user_name} do≈ÇƒÖczy≈Ç ({len(self.active_connections)} os√≥b)."})
        await self.update_user_list()

    def disconnect(self, user_id: str):
        if user_id in self.active_connections:
            user_name = self.users.get(user_id, f"U≈ºytkownik_{user_id[:5]}")
            del self.active_connections[user_id]
            del self.users[user_id]
            # usu≈Ñ boty tego u≈ºytkownika
            self.bots = [bot for bot in self.bots if bot.owner_id != user_id]
            logging.info(f"U≈ºytkownik {user_name} wyszed≈Ç ‚Äî jego boty usuniƒôte.")
            return user_name
        return None

    async def broadcast(self, message: dict):
        for user_id, conn in list(self.active_connections.items()):
            try:
                await conn.send_json(message)
            except Exception as e:
                logging.error(f"B≈ÇƒÖd broadcastu do {user_id}: {str(e)}")
                self.disconnect(user_id)

    async def update_user_list(self):
        await self.broadcast({
            "type": "user_list",
            "users": list(self.users.values()),
            "bots": [{"name": b.name, "owner": self.users.get(b.owner_id, b.owner_id)} for b in self.bots]
        })

    async def handle_message(self, user_id: str, message: str, user_name: str):
        """Obs≈Çuga wypowiedzi u≈ºytkownika ‚Äî resetuje licznik ciszy i uruchamia kolejkƒô bot√≥w."""
        self.last_message = message
        self.last_speaker = user_name
        self.user_silence_count = 0
        self.conversation_active = True

        await self.broadcast({"type": "message", "content": f"{user_name}: {message}"})
        await asyncio.sleep(self.bot_pause_seconds)  # chwila ciszy po wypowiedzi u≈ºytkownika

        await self.start_bot_turn()

    async def start_bot_turn(self):
        """Boty m√≥wiƒÖ po kolei, jeden po drugim, z przerwami."""
        if not self.bots:
            await self.broadcast({"type": "turn_info", "content": "Brak bot√≥w w rozmowie."})
            return

        self.last_speaker = "bot"
        for bot in self.bots:
            response = await bot.respond(self.last_message)
            await self.broadcast({"type": "message", "content": f"{bot.name}: {response}"})
            self.last_message = response
            await asyncio.sleep(self.bot_pause_seconds)  # przerwa po wypowiedzi bota

        await self.wait_for_user_turn()

    async def wait_for_user_turn(self):
        """Oczekiwanie na reakcjƒô cz≈Çowieka po turze bot√≥w."""
        self.last_speaker = "bot"
        await self.broadcast({
            "type": "timeout_info",
            "content": f"Czekam na odpowied≈∫ u≈ºytkownika (limit: {self.user_timeout_seconds} sek.)"
        })

        try:
            await asyncio.wait_for(self.wait_for_user_message(), timeout=self.user_timeout_seconds)
        except asyncio.TimeoutError:
            self.user_silence_count += 1
            logging.info(f"Brak odpowiedzi u≈ºytkownika. Cisza #{self.user_silence_count}")
            await self.broadcast({
                "type": "timeout_info",
                "content": f"U≈ºytkownik milczy... ({self.user_silence_count})"
            })
            # po ciszy ‚Äî kontynuuj rozmowƒô bot√≥w
            await self.start_bot_turn()

    async def wait_for_user_message(self):
        """Pomocnicze ‚Äî wstrzymuje siƒô, dop√≥ki nie pojawi siƒô nowa wiadomo≈õƒá u≈ºytkownika."""
        while self.last_speaker == "bot":
            await asyncio.sleep(0.5)
manager = ConnectionManager()

@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    await manager.connect(websocket, user_id)
    try:
        while True:
            data = await websocket.receive_json()
            logging.debug(f"Otrzymano dane WebSocket: {data}")
            user_name = manager.users.get(user_id, user_id)
            if data["type"] == "message":
                logging.info(f"Wiadomo≈õƒá od {user_name}: {data['content']}")
                await manager.handle_message(user_id, data["content"], user_name)
            elif data["type"] == "set_user_name":
                new_name = data.get("content", "").strip()
                if not new_name:
                    logging.warning("Brak nowej nazwy u≈ºytkownika")
                    await manager.broadcast({"type": "message", "content": " Podaj nowƒÖ nazwƒô u≈ºytkownika!"})
                    continue
                manager.users[user_id] = new_name
                logging.info(f"Ustawiono nazwƒô u≈ºytkownika {user_id}: {new_name}")
                await manager.broadcast({"type": "message", "content": f" {user_name} zmieni≈Ç nazwƒô na {new_name}."})
                await manager.update_user_list()
            elif data["type"] == "add_bot":
                bot_name = data.get("name", "").strip()
                bot_character = data.get("character", "").strip()
                if not bot_name or not bot_character:
                    logging.warning("Brak nazwy lub charakteru bota")
                    await manager.broadcast({"type": "message", "content": " Podaj nazwƒô i charakter bota!"})
                    continue
                if any(bot.name.lower() == bot_name.lower() and bot.owner_id == user_id for bot in manager.bots):
                    logging.warning(f"Bot {bot_name} ju≈º istnieje dla u≈ºytkownika {user_name}")
                    await manager.broadcast({"type": "message", "content": f" Bot {bot_name} ju≈º istnieje!"})
                    continue
                bot_id = str(uuid.uuid4())
                manager.bots.append(Bot(bot_id, bot_name, bot_character, user_id))
                logging.info(f"Dodano bota {bot_name} (charakter: {bot_character}, ID: {bot_id}, w≈Ça≈õciciel: {user_name})")
                await manager.broadcast({"type": "message", "content": f" {user_name} doda≈Ç bota {bot_name} jako {bot_character}."})
                await manager.broadcast({"type": "turn_info", "content": " Twoja kolej na m√≥wienie!"})
                await manager.update_user_list()
            elif data["type"] == "remove_bot":
                bot_name = data.get("name", "").strip()
                if not bot_name:
                    logging.warning("Brak nazwy bota do usuniƒôcia")
                    await manager.broadcast({"type": "message", "content": " Podaj nazwƒô bota do usuniƒôcia!"})
                    continue
                bots_before = len(manager.bots)
                manager.bots = [bot for bot in manager.bots if not (bot.name.lower() == bot_name.lower() and bot.owner_id == user_id)]
                if len(manager.bots) < bots_before:
                    logging.info(f"Usuniƒôto bota {bot_name} przez {user_name}")
                    await manager.broadcast({"type": "message", "content": f" {user_name} usunƒÖ≈Ç bota {bot_name}."})
                    await manager.broadcast({"type": "turn_info", "content": " Twoja kolej na m√≥wienie!"})
                    await manager.update_user_list()
                else:
                    logging.warning(f"Nie znaleziono bota {bot_name} dla u≈ºytkownika {user_name}")
                    await manager.broadcast({"type": "message", "content": f" Nie znaleziono bota {bot_name}."})
            elif data["type"] == "get_status":
                await manager.update_user_list()
    except WebSocketDisconnect:
        user_name = manager.disconnect(user_id)
        if user_name:
            logging.info(f"U≈ºytkownik {user_name} od≈ÇƒÖczony przez WebSocketDisconnect")
            await manager.broadcast({"type": "message", "content": f" {user_name} wyszed≈Ç ({len(manager.active_connections)} os√≥b)."})
            await manager.update_user_list()
    except Exception as e:
        logging.error(f"B≈ÇƒÖd w websocket_endpoint: {str(e)}")

if __name__ == "__main__":
    public_url = ngrok.connect(8000)
    logging.info(f"Publiczny link: {public_url}")
    uvicorn.run(app, host="0.0.0.0", port=8000)

"""
TODO:
   Do kazdej akcji chce dodac dwie skeundy ciszy: 
   jedna akcja+ dwie skeundy ciszy i do puki te 
   dwie skeundy si eni skoncza o zadan nowa si 
   enie zaczyna
"""
